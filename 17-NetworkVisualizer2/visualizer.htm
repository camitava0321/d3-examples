<!DOCTYPE html>
<meta charset="utf-8">
<meta name="author" content="Amitava Chakraborty">
<meta name="org" content="IBM">
<meta name="last-modified" content="09/06/2016">

<!-- Application Stylesheet -->
<link rel="stylesheet" type="text/css" href="css/visualizerStyles.css">



<!-- Local JS Libraries -->
<script src="js/d3.min.js"></script>
<script src="js/jquery.js" type="text/javascript"></script>

<!-- Application JS Functions -->
<script src="js/main.js" type="text/javascript"></script>
<script src="js/visualizerFunctions.js" type="text/javascript"></script>

 
<body onmousemove="showCoords(event)">
<!-- Application Header DIV -->
<div id="header">
	<table border="0" width=98%>
	<tr>
	<td width="50%" valign="top" align="left">
		<h2>Network Visualizer</h2>
	</td>
	<td width="50%" valign="top" align="left">
		<!-- Layout Buttons -->
		<button type="button" title="ToggleTick" 
		onClick="startTicking()">ToggleTick</button>
		<button type="button" id="ToggleAddNode" title="ToggleAddNode" 
		onClick="toggleAddNewNodes()">Start Network</button>
		<button type="button" id="cmdRectangular">Rectangular</button>
		<button type="button" title="Ellipse" onClick="reChartCircle(graph,link)">Ellipse</button>
		<button type="button" title="Tree" onClick="reChartTree(graph,link)">Tree</button>
	</td>
	</tr>
	</table>
</div>

<!-- Main Application DIV -->
<div id="application">

<script>
//var fStartTicking=false;
//Width and height of the screen
var width = window.innerWidth || document.documentElement.clientWidth|| document.body.clientWidth;
var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

var viewBoxWidth=document.getElementById('application').offsetWidth;
var viewBoxHeight=document.getElementById('application').offsetHeight;

//Link Characteristics
var directionalLinks=false;
var curvedLinks=false;
//Arrowhead width & height
var arrowHeadWidth=5;
var arrowHeadHeight=5;

var defaultX=211;//width/2;
var defaultY=580;//height/2;

var graph;	
var len;
var initialX=150, initialY=50;
var linkType;
var link;
var drag;
var node;
var circleNode;


//Force Parameters
var gravity=.01,
	charge=-50,
	linkDistance=60,
	friction=0.5,
	radius=100;
consoleLog("Window width:height "+width+":"+height);

//Color of the nodes(devices) - set according to the portfolios
//Either choose a standard d3 specified color category (here 20 colors)
//var color = d3.scale.category20();
//Or set the colors the way you want
var color = d3.scale.ordinal()
  .domain(["Hub",      "Macro",       "Micro",       "Nano",       "Pico",       "Femto",       "AMC",       "8",       "9"])			//assumed 9 Portfolios.
  .range(["#5CB8E6", "#E65C8A", "#FFFF00", "#00FF00", "#FFFF00", "#FF7F00", "#FF0000", "#888888", "#888888"]);	//and the corresponding colors

//Setting the scale for the radius of the circles	  
var radiusScale=d3.scale.linear()
  					.domain([0,50])    //map this domain
  					.range([8,40]);    //to this range

  
//Setup the Force Layout  
var force = d3.layout.force()
	.gravity(gravity)
    .charge(charge)
    .linkDistance(linkDistance)
	.friction(friction)
    .size([width, height]);

//Append a Standard Vector Graphics container - 
//viewbox & preserveAspectRatio ensures that the image scales with the browser window size
var svg = d3.select("#application").append("svg")
	.attr("viewBox", "0 0 " + viewBoxWidth + " " + viewBoxHeight )
    .attr("preserveAspectRatio", "xMidYMid meet");

var done=false;
//data set file is read and the entire json data is put in the variable graph.	
d3.json("data/output-d3.json", function(error, graph1) {    //Callback Function
  if (error) {
	console.log ("File Read Error: "+error);  	//print error
	throw error;			//throw error
  }
  graph=graph1;
  done=true;
  initialise();
  updateLinks();
  updateNodes();
  setForceTick();
  //addNewNodes();
  double_click_to_fade();
});    //Callback function ends

function initialise()
{
//Set the Initial position of the nodes  
//len = graph.devices.length;

//Set nodes and edges to the force layout  
  force
      .nodes(graph.devices)
      .links(graph.edges)
      .start()
	  ;
drag = force.drag()
			.on("dragstart", dragstart);
}

function updateLinks()
{
	//Append the links one by one
	linkType=(curvedLinks)?"path":"line";
	link = svg.selectAll(".link")
	      .data(graph.edges)
	    .enter().append(linkType)		//for-each data append a line
	      .attr("class", "link")	//set the HTML5 attribute of the CSS object .link
	  	  .on('click', function(d){displayInteractionProfile('applicationProfile',d);}) //AMC:For click-to-fade
	  	  .on('dblclick', function(d){double_click_to_fade();}) //AMC:For click-to-fade
		  .style("marker-end",  "url(#suit)"); // To draw the arrow heads 

		  sortLinks(graph.edges);
		  //Add tooltip text to each link
		  link.append("title")
		      .text(function(d) { return (
		d.source.name+"->"+d.target.name+"\n"+
		"informationDomain: "+d.informationDomain+"\n"+
		"interactionVehicle: "+d.interactionVehicle+"\n"+
		"interfaceEvent: "+d.interfaceEvent); });

		  if (directionalLinks) {
			//Append arrow-head markers to the links where a directional attribute is available  
			svg.append("defs").selectAll("marker")
			    .data(["suit", "licensing", "resolved"])
			  .enter().append("marker")
			    .attr("id", function(d) { return d; })
			    .attr("viewBox", "0 -5 10 10")
			    .attr("refX", 75)
			    .attr("refY", 0)
			    .attr("markerWidth", arrowHeadWidth)
			    .attr("markerHeight", arrowHeadHeight)
			    .attr("orient", "auto")
			  .append("path")
			    .attr("d", "M0,-5 L10,0 L0,5 L3,0 L0,-5")
				.style("fill","#777777")
			    //.style("stroke", "#777777")
			    .style("opacity", "1");
			}

}

function updateNodes()
{
	//Append the nodes/devices one by one
	node = svg.selectAll(".node")
	      .data(graph.devices,function(d) { return d.id; })
	    .enter().append("g")	//g is the graphics-container to hold the shape(circle) and the text within it
	      .attr("class", "node")
//	      .call(force.drag)
	      .call(drag)
		  ;
	//Add a circle to the graphics-container g for each node
	  circleNode = node.append("circle")
	      .attr("r", function(d){d.radius=radiusScale(d.weight); return d.radius;})
	      .style("fill", function(d) { return color(d.typeOfDevice); })
	  	  .on('click', function(d){displayApplicationProfile('applicationProfile',d);}) //AMC:For click-to-fade
	  	  .on('dblclick', connectedNodes) //AMC:For doubleclick-to-fade
		  
		  ;
		node.append("text")
			//.attr("dx", function(d){console.log("radius: "+(10+(d.weight)));return -(10+(d.weight))+5;})
			.attr("dy", ".4em")
			//.attr("class","labeltext")
			.text(function(d){return d.name.substring(0,1)});
		//Add tooltip text to each node
		  node.append("title")
		      .text(function(d,event) { return d.id+": "+d.name+"("+d.x+","+d.y+")"+"("+d.weight+")"; });
}



//reChartFixedPosition(graph,link);
//reChartCircle(graph,link);
//reChartTree(graph,link);

function setForceTick()
{
	//Force Layout parameters setup
	  force.on("tick", function() {
	  if(fStartTicking)
	  {
		drawNodes();
		drawLinks();
	  }
		node.each(collide(1)); //Added so that the nodes stayed apart from each other
	});
}



//Code piece to keep the application nodes separate from each-other	
var padding =1, // separation between circles
    radius=8;
function collide(alpha) {
  var quadtree = d3.geom.quadtree(graph.devices);
  return function(d) {
    var rb = 2*d.radius + padding,
        nx1 = d.x - rb,
        nx2 = d.x + rb,
        ny1 = d.y - rb,
        ny2 = d.y + rb;
    quadtree.visit(function(quad, x1, y1, x2, y2) {
      if (quad.point && (quad.point !== d)) {
        var x = d.x - quad.point.x,
            y = d.y - quad.point.y,
            l = Math.sqrt(x * x + y * y);
          if (l < rb) {
          l = (l - rb) / l * alpha;
          d.x -= x *= l;
          d.y -= y *= l;
          quad.point.x += x;
          quad.point.y += y;
        }
      }
      return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
    });
  };
}

//AMC:This is for the doubleclick-to-fade - Start
//Toggle stores whether the highlighting is on
var toggle = 0;
//Create an array logging what is connected to what
var linkedByIndex = {};

function double_click_to_fade()
{
	for (i = 0; i < graph.devices.length; i++) {
	    linkedByIndex[i + "," + i] = 1;
	};
	graph.edges.forEach(function (d) {
	    linkedByIndex[d.source.index + "," + d.target.index] = 1;
	});
}
//This function looks up whether a pair are neighbours
function neighboring(a, b) {
    return linkedByIndex[a.index + "," + b.index];
}
function connectedNodes() {
    if (toggle == 0) {
        //Reduce the opacity of all but the neighbouring nodes
        d = d3.select(this).node().__data__;
        node.style("opacity", function (o) {
            return neighboring(d, o) | neighboring(o, d) ? 1 : 0.1;
        });
        link.style("opacity", function (o) {
            return d.index==o.source.index | d.index==o.target.index ? 1 : 0.1;
        });
        //Reduce the op
        toggle = 1;
    } else {
        //Put them back to opacity=1
        node.style("opacity", 1);
        link.style("opacity", 1);
        toggle = 0;
    }
}	
//AMC:This is for the doubleclick-to-fade - End

/* Add drag & zoom behaviours  - not working yet*/
/* Yet to write the functions dragmove and dragzoom */
/*
    svg.call( d3.behavior.drag()
	      .on("drag",dragmove) );
    svg.call( d3.behavior.zoom()
	      .x(xScale)
	      .y(yScale)
	      .scaleExtent([1, 6])
	      .on("zoom", doZoom) );
*/

function toggleAddNewNodes()
{
consoleLog(document.getElementById("ToggleAddNode").innerHTML);
if (document.getElementById("ToggleAddNode").innerHTML==="Start Network") {
window.myInterval=setInterval(addANewNode,1500);
document.getElementById("ToggleAddNode").innerHTML="Stop Network";
} else {
stopAddNewNodes();  //clearInterval(myID);
document.getElementById("ToggleAddNode").innerHTML="Start Network";	
}
}

function stopAddNewNodes(){
if(window.myInterval!=undefined&&window.myInterval!='undefined'){
clearInterval(window.myInterval);
}
}


var addedNode=0;
function addANewNode()
{
	addedNode++;
	//After adding 500 nodes stop
	if (addedNode>500) {
	stopAddNewNodes();  //clearInterval(myID);
	}
	//fStartTicking=true;
	var newNode=getANewNode(graph);
	graph.devices.push(newNode);
	
	var edge=getAnEdge(newNode);
	graph.edges.push(edge);
	
	//force.stop();
	initialise();
	
	link = svg.selectAll(".link")
		.remove();
	/*
	link = svg.selectAll(".link")
    	.data(graph.edges)
  	.enter().insert(linkType)		//for-each data append a line
    .attr("class", "link")	//set the HTML5 attribute of the CSS object .link
	  .on('click', function(d){displayInteractionProfile('applicationProfile',d);}) //AMC:For click-to-fade
	  .style("marker-end",  "url(#suit)"); // To draw the arrow heads 
	*/
	updateLinks();
	updateNodes();
	setForceTick();
}
	  
//});  //End data read function

function dragstart(d)
{
d3.select("this").classed("fixed", d.fixed=true);
}

function getANewNode(graph)
{
len=graph.devices.length;
var node_id=len+1;
var node={
"id": node_id,
"name": "Aub0"+node_id,
"typeOfDevice": "AMC",
"deviceDescription": "Aub",
"maxConnections": "10",
"canConnect": "[N/A]"
}

return node;
}

function getAnEdge(newNode)
{
	var targetNodeID=Math.floor(len*Math.random());
	console.log(targetNodeID);
	var edge={
	"source": newNode.id-3,
	"target": targetNodeID,
	"bond": "1"
	};
return edge;
}


<!-- Set the background style -->
d3.select("body").style("background-color", "#111133")
d3.select("body").style("color", "#4455AA")
</script>
<!-- Div/Placeholder for Portfolio legends -->
<div id="portfolioLegends" 
style="position: absolute; top: 300px; left: 0px; width: 70px; height: 100px; ">

<table id="portfolioLegendsTable" border="0" width="70" style="font-size:9px; background-color: #444490;">
	<tr>
		<td style="padding-left:2px; font-size:20px; color:#5CB8E6" width="10%" align="centre">&#x26AB;
		</td>
		<td align="left" style="padding:2px" >
		Hub
		</td>
	</tr>
	<tr>
		<td style="padding-left:2px; font-size:20px; color:#E65C8A" width="10%" align="centre">&#x26AB;
		</td>
		<td align="left" style="padding:2px" >
		Macro Cell
		</td>
	</tr>
	<tr>
		<td style="padding-left:2px; font-size:20px; color:#FFFF00" width="10%" align="centre">&#x26AB;
		</td>
		<td align="left" style="padding:2px" >
		Micro Cell
		</td>
	</tr>
	<tr>
		<td style="padding-left:2px; font-size:20px; color:#00FF00" width="10%" align="centre">&#x26AB;
		</td>
		<td align="left" style="padding:2px" >
		Nano Cell
		</td>
	</tr>
	<tr>
		<td style="padding-left:2px; font-size:20px; color:#FFFF00" width="10%" align="centre">&#x26AB;
		</td>
		<td align="left" style="padding:2px" >
		Pico Cell
		</td>
	</tr>
	<tr>
		<td style="padding-left:2px; font-size:20px; color:#FF7F00" width="10%" align="centre">&#x26AB;
		</td>
		<td align="left" style="padding:2px" >
		Femto Cell
		</td>
	</tr>
</table>
</div>
<!-- Div/Placeholder to show the Application Profile Window -->
<div id="applicationProfile" class="ontop">

<table id="popup" border="0">
	<tr>
		<td style="padding-left:5px" width="80%" valign="bottom" align="left">
&nbsp;&nbsp;<p id="popupTitle">abc</p>
		</td>
		<td valign="top" align="right" style="padding:5px" >
<img id="close" src="resources/close-circle-512.png" width=20 height=20 onclick ="hide('applicationProfile')">
		</td>
	</tr>
	<tr colspan=2>
		<td style="padding-left:5px" width="100%" valign="top" align="left">
&nbsp;&nbsp;<p id="appDesc" class="appDesc" align="justify">abc</p>
		</td>
	</tr>
	<tr colspan=2>
		<td style="padding-left:5px" width="100%" valign="top" align="left">
&nbsp;&nbsp;<p id="msg">abc</p>
		</td>
	</tr>
</table>
</div>

<!-- Set the background logo placeholders -->
<div class="ibm">
<img src="resources/ibm_logo.gif" width=100 height=50/>
</div>
<div id="status" class="status">

</div>

</body>
</script>