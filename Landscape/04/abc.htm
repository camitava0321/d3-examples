<!DOCTYPE html>
<meta charset="utf-8">
<style>

.node {
  stroke: #fff;
  stroke-width: 1px;
  opacity: .5;
}

.node:hover {
	opacity: 1;
}
.link {
  stroke: #999;
  stroke-opacity: .8;
}

div.ibm {
    position: fixed;
    bottom: 0;
    right: 0;
    width: 100px;
}
div.maersk {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 70px;
}
marker#suit {
    fill: green;
}
path.link.suit {
    stroke: green;
}
path.link.resolved {
    stroke-dasharray: 0, 2 1;
}

}
</style>
<body>
<script src="d3.min.js"></script>

<!--This is for the fisheye view -->
<script type='text/javascript' src="http://bost.ocks.org/mike/fisheye/fisheye.js?0.0.3"> </script>

<!--This is for the html tooltip -->
<script type='text/javascript' src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"> </script>

<h2>Maersk Line Application Landscape</h2>

<script>

d3.select("body").style("background-color", "#000020")
d3.select("body").style("color", "#AA9999")

var width = 960,
    height = 900;

var color = d3.scale.category20();

var force = d3.layout.force()
    .charge(-200)
    .linkDistance(130)
    .size([width, height]);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

		  
//data set file is read and the entire json data is put in the variable graph.	
d3.json("landscapeData.json", function(error, graph) {
  if (error) throw error;

  force
      .nodes(graph.applications)
      .links(graph.interactions)
      .start();

  var link = svg.selectAll(".link")
      .data(graph.interactions)
    .enter().append("line")
      .attr("class", "link")
	  .style("marker-end",  "url(#suit)"); // Modified line 
//      .style("stroke-width", function(d) { return Math.sqrt(d.value);}) ;

  var node = svg.selectAll(".node")
      .data(graph.applications,function(d) { return d.id; })
    .enter().append("circle")
      .attr("class", "node")
      .attr("r", 10)
      .style("fill", function(d) { return color(d.portfolio); })
  	  .on('dblclick', connectedNodes) //AMC:For doubleclick-to-fade
      .call(force.drag)
	  ;

  node.append("title")
      .text(function(d) { return d.name; });

	  
  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  });


  
svg.append("defs").selectAll("marker")
    .data(["suit", "licensing", "resolved"])
  .enter().append("marker")
    .attr("id", function(d) { return d; })
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 25)
    .attr("refY", 0)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("path")
    .attr("d", "M0,-5L10,0L0,5 L10,0 L0, -5")
    .style("stroke", "#4679BD")
    .style("opacity", "0.6");

//AMC:This is for the fisheye view - Start
var fisheye = d3.fisheye.circular()
      .radius(120);
svg.on("mousemove", function() {
      force.stop();
      fisheye.focus(d3.mouse(this));
      d3.selectAll("circle").each(function(d) { d.fisheye = fisheye(d); })
          .attr("cx", function(d) { return d.fisheye.x; })
          .attr("cy", function(d) { return d.fisheye.y; })
          .attr("r", function(d) { return d.fisheye.z * 8; });
      link.attr("x1", function(d) { return d.source.fisheye.x; })
          .attr("y1", function(d) { return d.source.fisheye.y; })
          .attr("x2", function(d) { return d.target.fisheye.x; })
          .attr("y2", function(d) { return d.target.fisheye.y; });
    });  
//AMC:This is for the fisheye view - End

	


//AMC:This is for the doubleclick-to-fade - Start
//Toggle stores whether the highlighting is on
var toggle = 0;
//Create an array logging what is connected to what
var linkedByIndex = {};
for (i = 0; i < graph.nodes.length; i++) {
    linkedByIndex[i + "," + i] = 1;
};
graph.links.forEach(function (d) {
    linkedByIndex[d.source.index + "," + d.target.index] = 1;
});
//This function looks up whether a pair are neighbours
function neighboring(a, b) {
    return linkedByIndex[a.index + "," + b.index];
}
function connectedNodes() {
    if (toggle == 0) {
        //Reduce the opacity of all but the neighbouring nodes
        d = d3.select(this).node().__data__;
        node.style("opacity", function (o) {
            return neighboring(d, o) | neighboring(o, d) ? 1 : 0.1;
        });
        link.style("opacity", function (o) {
            return d.index==o.source.index | d.index==o.target.index ? 1 : 0.1;
        });
        //Reduce the op
        toggle = 1;
    } else {
        //Put them back to opacity=1
        node.style("opacity", 1);
        link.style("opacity", 1);
        toggle = 0;
    }
}	
//AMC:This is for the doubleclick-to-fade - End

    /* Add drag & zoom behaviours  - not working yet*/
    svg.call( d3.behavior.drag()
	      .on("drag",dragmove) );
    svg.call( d3.behavior.zoom()
	      .x(xScale)
	      .y(yScale)
	      .scaleExtent([1, 6])
	      .on("zoom", doZoom) );

	
});
</script>


<div class="ibm">
<img src="ibm_logo.gif" width=100 height=50/>
</div>
<div class="maersk">
<img src="Maersk_logo.png" width=70 height=63/>
</div>

</body>
</script>